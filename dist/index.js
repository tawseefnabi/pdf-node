import * as pdf from 'html-pdf';
import Handlebars from 'handlebars';
import handleError from 'cli-error-handler';
/**
 * Generates a PDF from an HTML template and data
 * @param options PDF generation options
 * @returns Promise that resolves with the generated PDF (as buffer or file info)
 * @throws {Error} If required options are missing or PDF generation fails
 */
export function generatePDF(options) {
    return new Promise((resolve, reject) => {
        if (!options || !options.html || !options.data) {
            reject(new Error('Some, or all, options are missing.'));
            return;
        }
        if (options.type !== undefined && options.type !== 'pdf') {
            reject(new Error('Only PDF file type is supported'));
            return;
        }
        // Create PDF from html template generated by handlebars
        const html = Handlebars.compile(options.html)(options.data);
        const pdfOptions = options.pdfOptions || {};
        // Check if buffer output is requested
        if (options.buffer === true) {
            // Output will be PDF buffer (useful for APIs/web services)
            pdf.create(html, pdfOptions).toBuffer(function (err, buffer) {
                if (err) {
                    handleError('error in creating buffer', err);
                    reject(err);
                    return;
                }
                console.log('PDF buffer generated, size:', buffer.length, 'bytes');
                resolve({
                    buffer: buffer,
                    size: buffer.length,
                    type: 'application/pdf'
                });
            });
        }
        else {
            // Output will be PDF file (default behavior)
            if (!options.path) {
                reject(new Error('Path is required when buffer option is not set to true.'));
                return;
            }
            const filepath = options.path;
            pdf.create(html, pdfOptions).toFile(filepath, function (err, res) {
                if (err) {
                    handleError('error in creating file', err);
                    reject(err);
                    return;
                }
                console.log('file generated:', res.filename);
                resolve(res);
            });
        }
    });
}
/**
 * Adds a page break to the PDF
 * @returns HTML string with a page break
 */
export function addNewPage() {
    return '<div style="page-break-after: always;"></div>';
}
const pdfNode = {
    generatePDF,
    addNewPage
};
export default pdfNode;
